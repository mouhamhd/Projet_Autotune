// Processing functions
#include "processing.h"
#include "fixFFT/fixFFT.h"
#include <stdint.h>
#include <unistd.h>

void benchmark(int16_t* sig_out,int16_t* sig,int64_t size){
    int mc_runs = 50;
    struct_timer timer;
    /*--------------------------------------------------------------------------
     * --- Main benchmark call (Monte carlo)
     * --------------------------------------------------------------------------*/
    printf("Starting routine\n");
    timer = tic();
    for (int c = 0 ; c < mc_runs ; c++){
        processing(sig_out,sig,size);
    }
    timer = toc(timer);
    printf("output\n");
    print_toc(timer);
}


int processing(int16_t* sig_out,int16_t* sig, int64_t size)
{
    // Core parameters 
    int size_fft = 8192;
    int segment_duration = 80;
    int scale;
    int pos_pitch;
    // Number of segment we will proceed
    int nbSeg = (int) (size /segment_duration);
    // An array with pitch indexes 
    int16_t* pitch_detected = malloc(sizeof(int16_t) * nbSeg);
    // An array for FFT computation
    int16_t* container_fft = malloc(sizeof(int16_t) * size_fft);

    // Detect pitch for each segment
    for (int n = 0; n < nbSeg; n++){
        // ZP approach for the segment 
        for (int m = 0; m < segment_duration; m++){
            container_fft[m] = sig[ n*segment_duration + m ];
        }
        // Rest of the Input buffer is set to 0 
        for (int m = segment_duration; m < size_fft; m++){
            container_fft[m] = 0;
        }
        // Fix point FFT @ Q(16,0,15)
        //scale = fix_fftr(container_fft, size_fft,0);
        // Find the pitch 
        pos_pitch = find_max(container_fft, size_fft);
        printf("New pitch at %d (scale= %d)\n",pos_pitch,scale);
    }
    // Free pointers
    free(pitch_detected);
    free(container_fft);
    return 0;
}

int find_max(int16_t* in, int64_t size)
{
    int max = 0;
    float vM = 0;
    for (int i = 1; i < size; i++){
        if (vM < in[i]){
            // We have a new max 
            vM = in[i];
            max = i;
        }
    }
   return max;
}


